 class Solution {          // tc is o(n+2E) + O(n) and sc is o(n)  // here total adjacent nodes= total degrees= 2E
  public:
    // Function to detect cycle in an undirected graph.
    bool detectCycle(int src,vector<int>adj[],vector<int>&vis)
    {
        queue<pair<int,int>>q;
        q.push({src,-1});
        vis[src]=1;
        while(!q.empty())
        {
            int node = q.front().first;
            int par = q.front().second;
            q.pop();
            for(auto it: adj[node])
            {
                if(!vis[it])
                {
                    vis[it]=1;
                    q.push({it,node});
                }
                else if(it!=par)
                  return true;
            }
        }
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
        vector<int>vis(V,0);
        for(int i=0;i<V;i++)
        {
            if(!vis[i]){
              if(detectCycle(i,adj,vis))
                 return true;
            }
        }
        return false;
    }
};
